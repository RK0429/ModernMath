openapi: 3.0.3
info:
  title: Math Knowledge Graph API
  description: |
    REST API for querying and exploring the mathematical knowledge graph.
    This API provides access to mathematical definitions, theorems, axioms, 
    and examples, along with their relationships and dependencies.
  version: 0.1.0
  contact:
    name: Math Knowledge Graph Team
    email: support@mathwiki.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: http://localhost:5001
    description: Local development server
  - url: https://api.mathwiki.org
    description: Production server (future)

tags:
  - name: nodes
    description: Operations on mathematical knowledge nodes
  - name: relationships
    description: Query relationships between nodes
  - name: search
    description: Search operations
  - name: query
    description: Custom SPARQL queries
  - name: health
    description: Health check endpoints

paths:
  /api/health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Returns the health status of the API service
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: healthy
                service: Math Knowledge Graph API
                version: 0.1.0

  /api/nodes/{nodeId}:
    get:
      tags:
        - nodes
      summary: Get node details
      description: Retrieve detailed information about a specific mathematical node
      operationId: getNode
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier of the node (e.g., 'def-group', 'thm-pythagorean')
          schema:
            type: string
            pattern: '^[a-z0-9-]+$'
          example: def-group
      responses:
        '200':
          description: Node details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/dependencies/{nodeId}:
    get:
      tags:
        - relationships
      summary: Get node dependencies
      description: Retrieve all nodes that this node depends on (uses)
      operationId: getDependencies
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier of the node
          schema:
            type: string
            pattern: '^[a-z0-9-]+$'
          example: thm-lagrange
      responses:
        '200':
          description: Dependencies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/dependents/{nodeId}:
    get:
      tags:
        - relationships
      summary: Get node dependents
      description: Retrieve all nodes that depend on (use) this node
      operationId: getDependents
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier of the node
          schema:
            type: string
            pattern: '^[a-z0-9-]+$'
          example: def-group
      responses:
        '200':
          description: Dependents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/search:
    get:
      tags:
        - search
      summary: Search nodes
      description: Search for nodes by label text
      operationId: searchNodes
      parameters:
        - name: q
          in: query
          required: true
          description: Search term to match against node labels
          schema:
            type: string
            minLength: 1
          example: group
        - name: page
          in: query
          required: false
          description: Page number for pagination (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          required: false
          description: Number of results per page (max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: limit
          in: query
          required: false
          description: Deprecated - use per_page instead. Limits the number of results returned
          deprecated: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Search term required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/nodes:
    get:
      tags:
        - nodes
      summary: Get all nodes
      description: Retrieve all nodes in the knowledge graph
      operationId: getAllNodes
      responses:
        '200':
          description: All nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeListResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/query:
    post:
      tags:
        - query
      summary: Execute custom SPARQL query
      description: |
        Execute a custom SPARQL SELECT query against the knowledge graph.
        Only SELECT queries are allowed for safety.
      operationId: customQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            example:
              query: |
                PREFIX mymath: <https://mathwiki.org/ontology#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                SELECT ?node ?label
                FROM <urn:x-arq:DefaultGraph>
                WHERE {
                  ?node rdf:type mymath:Theorem ;
                        rdfs:label ?label .
                }
                LIMIT 10
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlResponse'
        '400':
          description: Invalid query or only SELECT queries allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: SPARQL endpoint unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
        - service
        - version
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Health status of the service
        service:
          type: string
          description: Name of the service
        version:
          type: string
          description: API version

    NodeInfo:
      type: object
      properties:
        type:
          type: string
          description: Type of the node (Definition, Theorem, Axiom, Example)
          example: Definition
        label:
          type: string
          description: Human-readable label of the node
          example: "Definition: Group"
        domain:
          type: string
          description: Mathematical domain (if available)
          example: Algebra
        dependency:
          type: string
          description: ID of a dependency (used in relationship responses)
          example: def-set
        dependent:
          type: string
          description: ID of a dependent (used in relationship responses)
          example: thm-lagrange

    NodeResponse:
      type: object
      required:
        - node_id
        - results
        - count
      properties:
        node_id:
          type: string
          description: The requested node ID
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeInfo'
        count:
          type: integer
          description: Number of results

    RelationshipResponse:
      type: object
      required:
        - node_id
        - relationship
        - results
        - count
      properties:
        node_id:
          type: string
          description: The requested node ID
        relationship:
          type: string
          enum: [uses, used_by]
          description: Type of relationship
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeInfo'
        count:
          type: integer
          description: Number of results

    SearchResponse:
      type: object
      required:
        - search_term
        - results
        - count
      properties:
        search_term:
          type: string
          description: The search term used
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeInfo'
        count:
          type: integer
          description: Number of results

    NodeListResponse:
      type: object
      required:
        - results
        - count
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/NodeInfo'
        count:
          type: integer
          description: Number of results

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SPARQL SELECT query to execute
          minLength: 1

    SparqlResponse:
      type: object
      properties:
        head:
          type: object
          properties:
            vars:
              type: array
              items:
                type: string
              description: Variable names in the query
        results:
          type: object
          properties:
            bindings:
              type: array
              items:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [uri, literal, typed-literal, bnode]
                    value:
                      type: string
                    datatype:
                      type: string
                    xml:lang:
                      type: string

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for future authentication (not currently implemented)

# Security can be enabled in the future
# security:
#   - ApiKeyAuth: []