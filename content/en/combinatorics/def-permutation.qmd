---
id: def-permutation
requires:
- def-set
- def-graph
- ../logic-set-theory/def-function
status: complete
title: Permutation
translations:
  en: ../en/combinatorics/def-permutation.html
  ja: ../ja/combinatorics/def-permutation.html
type: Definition
---

# Permutation {#def-permutation}

A **permutation** of a [Set](../logic-set-theory/def-set.qmd) is a bijective [function](../logic-set-theory/def-function.qmd) from the set to itself.

## Formal Definition

Let $S$ be a set. A permutation of $S$ is a bijection $\sigma: S \to S$.

For a finite set $S = \{1, 2, ..., n\}$, a permutation can be represented as a rearrangement of the elements.

## Notation

Permutations can be written in several ways:

1. **Two-line notation**:
   $$\sigma = \begin{pmatrix} 1 & 2 & 3 & ... & n \\ \sigma(1) & \sigma(2) & \sigma(3) & ... & \sigma(n) \end{pmatrix}$$

2. **One-line notation**: $\sigma = [\sigma(1), \sigma(2), ..., \sigma(n)]$

3. **Cycle notation**: $(a_1\ a_2\ ...\ a_k)$ means $a_1 \mapsto a_2 \mapsto ... \mapsto a_k \mapsto a_1$

## Properties

- The set of all permutations of $n$ elements forms the symmetric group $S_n$
- The number of permutations of $n$ distinct elements is $n!$
- Every permutation can be decomposed into disjoint cycles (which form [Directed Graphs](def-graph.qmd) where each vertex has exactly one outgoing edge)
- Every permutation can be expressed as a product of transpositions
- The symmetric group $S_n$ naturally acts on sets via [group actions](../algebra/def-group-action.qmd)

## Examples

For $S = \{1, 2, 3\}$:
- Identity: $(1)(2)(3)$
- Transposition: $(1\ 2)(3)$
- 3-cycle: $(1\ 2\ 3)$

## Dependency Graph

```{mermaid}
%%| fig-cap: "Local dependency graph"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
    def-set["Definition: Set"]:::definition
    def-function["Definition: Function"]:::definition
    def-binomial-coefficient["Definition: Binomial Coefficient"]:::definition
    def-permutation["Definition: Permutation"]:::definition
    def-graph["Definition: Graph"]:::definition
    def-permutation --> def-function
    def-binomial-coefficient --> def-permutation
    def-permutation --> def-set
    def-permutation --> def-graph
    class def-permutation current
    click def-set "def-set.html" "Go to Set definition"
    click def-function "def-function.html" "Go to Function definition"
    click def-binomial-coefficient "def-binomial-coefficient.html" "Go to Binomial Coefficient definition"
    click def-graph "def-graph.html" "Go to Graph definition"
```

## Interactive Visualization

Explore the local knowledge graph neighborhood interactively:

::: {.graph-viz data-id="def-permutation" data-width="700" data-height="500"}
:::

You can:
- **Drag** nodes to rearrange the layout
- **Zoom** in/out with your mouse wheel
- **Hover** over nodes to see details
- View the [full interactive version](../../output/interactive/en/def-permutation.html){target="_blank"}
