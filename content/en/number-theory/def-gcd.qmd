---
id: def-gcd
requires:
- def-set
status: complete
title: 'Definition: Greatest Common Divisor'
translations:
  en: ../en/number-theory/def-gcd.html
  ja: ../ja/number-theory/def-gcd.html
type: Definition
---

# Definition: Greatest Common Divisor {#def-gcd}

The **greatest common divisor (GCD)** of two integers is the largest positive integer that divides both numbers.

## Definition

Let $a, b \in \mathbb{Z}$, not both zero. The greatest common divisor of $a$ and $b$, denoted $\gcd(a, b)$, is the unique positive integer $d$ such that:

1. $d \mid a$ and $d \mid b$ (i.e., $d$ divides both $a$ and $b$)
2. If $c \mid a$ and $c \mid b$ for some integer $c$, then $c \mid d$

## Alternative Characterization

$\gcd(a, b)$ is the largest element in the [set](../logic-set-theory/def-set.qmd):
$$\{d \in \mathbb{Z}^+ : d \mid a \text{ and } d \mid b\}$$

## Properties

1. **Commutativity**: $\gcd(a, b) = \gcd(b, a)$
2. **Associativity**: $\gcd(a, \gcd(b, c)) = \gcd(\gcd(a, b), c)$
3. **Identity**: $\gcd(a, 0) = |a|$ for $a \neq 0$
4. **Scaling**: $\gcd(ka, kb) = |k| \cdot \gcd(a, b)$ for any integer $k$
5. **Bézout's Identity**: There exist integers $x, y$ such that $\gcd(a, b) = ax + by$

## Euclidean Algorithm

The GCD can be computed efficiently using the Euclidean algorithm:
$$\gcd(a, b) = \gcd(b, a \bmod b)$$

Repeating until the remainder is 0.

## Special Cases

- $\gcd(a, a) = |a|$
- $\gcd(a, 1) = 1$ for any integer $a$
- If $\gcd(a, b) = 1$, we say $a$ and $b$ are **coprime** or **relatively prime**

## Examples

1. $\gcd(12, 18) = 6$
2. $\gcd(17, 19) = 1$ (17 and 19 are coprime)
3. $\gcd(0, 5) = 5$
4. $\gcd(−24, 36) = 12$

## Extended Definition

For a finite set of integers $\{a_1, a_2, \ldots, a_n\}$ not all zero:
$$\gcd(a_1, a_2, \ldots, a_n) = \gcd(a_1, \gcd(a_2, \ldots, a_n))$$

## See Also

- @def-congruence - Coprime integers are essential for modular inverses
- @def-prime - Prime numbers are coprime to all smaller positive integers
- @thm-euclidean-algorithm - Efficient algorithm for computing GCD
- @thm-euler - Uses the concept of coprime integers

## Mermaid Diagram

```mermaid
graph TD
    A[GCD(a,b)] --> B[Largest Common Divisor]
    B --> C[d | a and d | b]
    B --> D[c | a, c | b ⟹ c | d]
    A --> E[Properties]
    E --> F[Commutative]
    E --> G[Associative]
    E --> H[Bézout's Identity]
    A --> I[Euclidean Algorithm]
    I --> J[gcd(a,b) = gcd(b, a mod b)]

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#bbf,stroke:#333,stroke-width:2px
    style H fill:#bfb,stroke:#333,stroke-width:2px
    style I fill:#bbf,stroke:#333,stroke-width:2px
```

## Dependency Graph

```{mermaid}
%%| fig-cap: "Local dependency graph"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
    def-gcd["Definition: Greatest Common Divisor"]:::definition
    thm-euler["Theorem: Euler's Theorem"]:::theorem
    thm-euclidean-algorithm["Theorem: Euclidean Algorithm"]:::theorem
    ex-principal-ideal["Example: Principal Ideals in Integers"]:::example
    def-prime["Definition: Prime Number"]:::definition
    thm-chinese-remainder["Theorem: Chinese Remainder Theorem"]:::theorem
    def-set["Definition: Set"]:::definition
    def-congruence["Definition: Congruence (Modular Arithmetic)"]:::definition
    def-gcd --> def-prime
    thm-chinese-remainder --> def-gcd
    thm-euclidean-algorithm --> def-gcd
    ex-principal-ideal --> def-gcd
    def-gcd --> def-set
    def-congruence --> def-gcd
    def-gcd --> def-congruence
    def-gcd --> thm-euclidean-algorithm
    def-gcd --> thm-euler
    class def-gcd current
    click thm-euler "thm-euler.html" "Go to Euler's Theorem theorem"
    click thm-euclidean-algorithm "thm-euclidean-algorithm.html" "Go to Euclidean Algorithm theorem"
    click ex-principal-ideal "ex-principal-ideal.html" "Go to Principal Ideals in Integers example"
    click def-prime "def-prime.html" "Go to Prime Number definition"
    click thm-chinese-remainder "thm-chinese-remainder.html" "Go to Chinese Remainder Theorem theorem"
    click def-set "def-set.html" "Go to Set definition"
    click def-congruence "def-congruence.html" "Go to Congruence (Modular Arithmetic) definition"
```

## Interactive Visualization

Explore the local knowledge graph neighborhood interactively:

::: {.graph-viz data-id="def-gcd" data-width="700" data-height="500"}
:::

You can:
- **Drag** nodes to rearrange the layout
- **Zoom** in/out with your mouse wheel
- **Hover** over nodes to see details
- View the [full interactive version](../../output/interactive/def-gcd.html){target="_blank"}
