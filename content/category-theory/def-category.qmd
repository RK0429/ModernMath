---
id: def-category
requires:
- def-set
status: complete
title: 'Definition: Category'
type: Definition
---

# Category {#def-category}

A **category** is a mathematical structure consisting of objects and morphisms (arrows) between them, with a composition operation satisfying certain axioms.

## Formal Definition

A category $\mathcal{C}$ consists of:

1. A collection of **objects**, denoted $\text{Ob}(\mathcal{C})$
2. For each pair of objects $A, B$, a [Set](../logic-set-theory/def-set.qmd) of **morphisms** (or arrows) from $A$ to $B$, denoted $\text{Hom}_{\mathcal{C}}(A, B)$
3. For each triple of objects $A, B, C$, a **composition operation**:
   $$\circ: \text{Hom}(B, C) \times \text{Hom}(A, B) \to \text{Hom}(A, C)$$

satisfying:

### Axioms

1. **Identity**: For each object $A$, there exists an identity morphism $\text{id}_A \in \text{Hom}(A, A)$ such that:
   - $f \circ \text{id}_A = f$ for all $f: A \to B$
   - $\text{id}_A \circ g = g$ for all $g: B \to A$

2. **Associativity**: For morphisms $f: A \to B$, $g: B \to C$, $h: C \to D$:
   $$h \circ (g \circ f) = (h \circ g) \circ f$$

## Examples

- **Set**: Objects are sets, morphisms are functions
- **Grp**: Objects are groups, morphisms are group homomorphisms
- **Top**: Objects are topological spaces, morphisms are continuous functions
- **Vect**: Objects are vector spaces, morphisms are linear transformations

## Dependency Graph

```{mermaid}
%%| fig-cap: "Local dependency graph"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
    def-set["Definition: Set"]:::definition
    def-functor["Definition: Functor"]:::definition
    def-category["Definition: Category"]:::definition
    def-category --> def-set
    def-functor --> def-category
    class def-category current
```