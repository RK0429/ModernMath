---
id: def-tree
requires:
- def-graph
- def-set
status: complete
title: '定義: 木'
translations:
  en: ../en/combinatorics/def-tree.html
  ja: ../ja/combinatorics/def-tree.html
translation_of: ../../en/combinatorics/def-tree.qmd
type: Definition
---

# 定義: 木 {#def-tree}

**木**は、閉路のない連結[グラフ](def-graph.qmd)である。グラフ理論における最も基本的な構造の一つであり、数学やコンピュータサイエンスで数多くの応用がある。

## 形式的定義

グラフ $T = (V, E)$ が木であるための必要十分条件は：
1. $T$ が連結である（任意の2頂点間にパスが存在する）
2. $T$ が非閉路的である（閉路を含まない）

## 同値な特徴付け

$n$ 個の頂点を持つグラフ $T$ について、以下の命題は同値である：

1. $T$ は木である
2. $T$ は連結で、ちょうど $n - 1$ 個の辺を持つ
3. $T$ は非閉路的で、ちょうど $n - 1$ 個の辺を持つ
4. $T$ の任意の2頂点間にはちょうど1つのパスが存在する
5. $T$ は連結だが、任意の辺を取り除くと非連結になる
6. $T$ は非閉路的だが、任意の辺を追加するとちょうど1つの閉路ができる

## 性質

### 基本的性質

1. **辺の数**: $n$ 個の頂点を持つ木は、ちょうど $n - 1$ 個の辺を持つ

2. **葉の頂点**: 少なくとも2つの頂点を持つ木は、少なくとも2つの葉（次数1の頂点）を持つ

3. **一意なパス**: 木の任意の2頂点間には、ちょうど1つのパスが存在する

4. **二部グラフ**: すべての木は二部グラフである（隣接する頂点が同じ色を共有しないように、2色で頂点を彩色できる）

### 構造的性質

1. **削除性質**: 木から任意の辺を取り除くと、ちょうど2つの連結成分に分かれる

2. **追加性質**: 木に任意の辺を追加すると、ちょうど1つの閉路ができる

3. **次数の和**: $n$ 個の頂点を持つ木について: $\sum_{v \in V} \deg(v) = 2(n - 1)$

## 特殊な種類の木

### 根付き木

**根付き木**は、*根*と呼ばれる特定の頂点を持つ木である。これにより階層構造が課され：
- 各頂点は一意な*親*を持つ（根を除く）
- 頂点は0個以上の*子*を持つことができる
- 葉は子を持たない頂点である

### 二分木

各頂点が高々2つの子を持つ根付き木で、通常左の子と右の子として区別される。

### 全域木

連結グラフ $G$ が与えられたとき、**全域木**は以下を満たす部分グラフである：
- $G$ のすべての頂点を含む
- 木である

## 例

### 例1: パスグラフ

頂点 $\{1, 2, ..., n\}$ と辺 $\{(i, i+1) : 1 \leq i < n\}$ を持つパスグラフ $P_n$ は木である。

### 例2: 星グラフ

以下を持つ星グラフ $S_n$：
- 中心頂点 $c$
- その他の $n$ 個の頂点 $v_1, v_2, ..., v_n$
- $c$ と各 $v_i$ を結ぶ辺

### 例3: 二分木

高さ $h$ の完全二分木は：
- $2^{h+1} - 1$ 個の頂点を持つ
- $2^h$ 個の葉を持つ
- 内部頂点はちょうど2つの子を持つ（最下段を除く可能性がある）

## 応用

木は以下の分野で基本的である：

1. **コンピュータサイエンス**：
   - データ構造（二分探索木、ヒープ、B木）
   - アルゴリズム（全域木アルゴリズム、決定木）
   - ファイルシステムとディレクトリ構造

2. **数学**：
   - 組合せ的列挙（ケイリーの公式：$n$ 個の頂点上のラベル付き木は $n^{n-2}$ 個）
   - 最適化（最小全域木）
   - 代数的構造（木分解）

3. **実世界の応用**：
   - 家系図と系譜学
   - 組織階層
   - ネットワークルーティングとブロードキャスティング

## 関連概念

### 森

**森**は非閉路的グラフであり、木の互いに素な和として表される。

### 木の中心

木の**中心**は、離心率（他の任意の頂点への最大距離）が最小の頂点から成る。

### 木の直径

木の**直径**は、任意の2頂点間の最長パスの長さである。

## 参照

- @def-graph
- @def-binomial-coefficient（ラベル付き木の数え上げ）
- グラフの連結性とパス

## 依存関係グラフ

```{mermaid}
%%| fig-cap: "Local dependency graph"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
```

## インタラクティブ可視化

ローカルな知識グラフの近傍をインタラクティブに探索：

::: {.graph-viz data-id="def-tree" data-width="700" data-height="500"}
:::

次のことができます：
- ノードを**ドラッグ**してレイアウトを再配置
- マウスホイールで**ズームイン/アウト**
- ノードに**ホバー**して詳細を表示
- [完全なインタラクティブ版](../../output/interactive/def-tree.html){target="_blank"}を表示
