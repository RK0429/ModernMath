---
created: 2024-01-20
id: def-binary-operation
lang: ja
lean_id: MathKnowledgeGraph.Algebra.BinaryOp
requires:
- def-set
- def-function
status: complete
tags:
- 二項演算
- 代数学
- 演算
title: 二項演算
translation_of: ../../en/algebra/def-binary-operation.qmd
translations:
  en: ../en/algebra/def-binary-operation.html
  ja: ../ja/algebra/def-binary-operation.html
type: Definition
updated: 2024-01-20
---

# 二項演算 {#def-binary-operation}

$S$ を[集合](../logic-set-theory/def-set.qmd)とする。$S$ 上の**二項演算**とは、[関数](../logic-set-theory/def-function.qmd) $\star: S \times S \to S$ のことである。

## 説明

二項演算は集合から2つの要素を取り、同じ集合の別の要素を生成する。$\star(a, b)$ の代わりに $a \star b$ と書くことが多い。

## 二項演算の性質

集合 $S$ 上の二項演算 $\star$ は以下のような様々な性質を満たすことがある：

1. **閉性**: 定義により、すべての $a, b \in S$ に対して $a \star b \in S$ である

2. **[結合性](def-associativity.qmd)**: すべての $a, b, c \in S$ に対して $(a \star b) \star c = a \star (b \star c)$ である（[半群](def-semigroup.qmd)を参照）

3. **可換性**: すべての $a, b \in S$ に対して $a \star b = b \star a$ である

4. **単位元**: すべての $a \in S$ に対して $a \star e = e \star a = a$ となる $e \in S$ が存在する

5. **逆元**: 各 $a \in S$ に対して、$a \star b = b \star a = e$ （ここで $e$ は単位元）となる $b \in S$ が存在する

## 例

一般的な二項演算には以下のものがある：

- 整数 $\mathbb{Z}$ 上の加法（$+$）
- 実数 $\mathbb{R}$ 上の乗法（$\cdot$）
- $n \times n$ 行列上の行列積
- 関数の合成

## 関連項目

- 定義: 群（この概念を使用）
- 例: 加法における整数（この概念を説明）

## 依存関係グラフ

```{mermaid}
%%| fig-cap: "ローカル依存関係グラフ"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
    def-set["定義: 集合"]:::definition
    def-function["定義: 関数"]:::definition
    def-binary-operation["定義: 二項演算"]:::definition
    def-binary-operation --> def-function
    def-binary-operation --> def-set
    class def-binary-operation current
    click def-set "def-set.html" "集合の定義へ"
    click def-function "def-function.html" "関数の定義へ"
```

## インタラクティブ可視化

ローカルナレッジグラフの近傍をインタラクティブに探索：

::: {.graph-viz data-id="def-binary-operation" data-width="700" data-height="500"}
:::

次のことができます：
- ノードを**ドラッグ**してレイアウトを再配置
- マウスホイールで**ズーム**イン/アウト
- ノードに**ホバー**して詳細を表示
- [別ウィンドウ](../../output/interactive/ja/def-binary-operation.html){target="_blank"}で完全なインタラクティブ版を表示


## 形式的証明

この定義は Lean 4 で形式的に検証されています。下のインタラクティブエディタで証明を探索できます：

```{=html}
<div class="lean-proof-container" style="margin: 1em 0;">
  <iframe
    src="https://live.lean-lang.org/#file=https://RK0429.github.io/ModernMath/formal/Algebra/Groups.lean"
    width="100%"
    height="600"
    style="border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
    title="Lean 4 Interactive Proof">
    <p>ブラウザが iframe をサポートしていません。</p>
  </iframe>
  <p style="text-align: right; margin-top: 0.5em;">
    <a href="https://live.lean-lang.org/#file=https://RK0429.github.io/ModernMath/formal/Algebra/Groups.lean" target="_blank" rel="noopener noreferrer">
      フルスクリーンで表示 →
    </a>
  </p>
</div>
```

**Lean ID**: `MathKnowledgeGraph.Algebra.BinaryOp`
**Module**: `MathKnowledgeGraph.Algebra.Groups`
