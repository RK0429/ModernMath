---
id: def-congruence
lean_id: Mathlib.Data.Int.ModEq
requires:
- def-set
- ax-induction
- thm-fermat-little
- def-divisibility
status: complete
title: '定義: 合同（モジュラー演算）'
translation_of: ../../en/number-theory/def-congruence.qmd
translations:
  en: ../en/number-theory/def-congruence.html
  ja: ../ja/number-theory/def-congruence.html
type: Definition
---

# 定義: 合同（モジュラー演算） {#def-congruence}

2つの整数 $a$ と $b$ が正の整数 $n$ を**法として合同**であるとは、それらの差 $a - b$ が $n$ で[割り切れる](def-divisibility.qmd)ことをいいます。これを次のように書きます：

$$a \equiv b \pmod{n}$$

## 形式的定義

整数 $a, b$ と正の整数 $n$ に対して：
$$a \equiv b \pmod{n} \iff n \mid (a - b)$$

同値な表現として、$a$ と $b$ が $n$ を法として合同であるとは、$n$ で割った余りが等しいことです。

## 性質

### 同値関係

$n$ を法とする合同は、整数の[集合](../logic-set-theory/def-set.qmd)上の同値関係です：

1. **反射律**: すべての $a \in \mathbb{Z}$ に対して $a \equiv a \pmod{n}$
2. **対称律**: $a \equiv b \pmod{n}$ ならば $b \equiv a \pmod{n}$
3. **推移律**: $a \equiv b \pmod{n}$ かつ $b \equiv c \pmod{n}$ ならば $a \equiv c \pmod{n}$

### 算術的性質

合同は算術演算と両立します：

1. **加法**: $a \equiv b \pmod{n}$ かつ $c \equiv d \pmod{n}$ ならば：
   $$a + c \equiv b + d \pmod{n}$$

2. **減法**: $a \equiv b \pmod{n}$ かつ $c \equiv d \pmod{n}$ ならば：
   $$a - c \equiv b - d \pmod{n}$$

3. **乗法**: $a \equiv b \pmod{n}$ かつ $c \equiv d \pmod{n}$ ならば：
   $$ac \equiv bd \pmod{n}$$

4. **べき乗**: $a \equiv b \pmod{n}$ かつ $k$ が正の整数ならば：
   $$a^k \equiv b^k \pmod{n}$$

### 除法の性質

除法には特別な注意が必要です。$ac \equiv bc \pmod{n}$ かつ $\gcd(c, n) = d$ ならば：
$$a \equiv b \pmod{n/d}$$

特に、$\gcd(c, n) = 1$ ならば $a \equiv b \pmod{n}$ です。

## モジュラー逆元

整数 $a$ の $n$ を法とする**乗法逆元**とは、次を満たす $b$ です：
$$ab \equiv 1 \pmod{n}$$

この逆元は $\gcd(a, n) = 1$ のときかつそのときに限り存在します（@def-gcd 参照）。

## 例

### 時計算術

12時間時計は法12のモジュラー演算を使います：
- 9時の7時間後：$9 + 7 \equiv 16 \equiv 4 \pmod{12}$
- 2時の15時間前：$2 - 15 \equiv -13 \equiv 11 \pmod{12}$

### 数値例

1. $17 \equiv 5 \pmod{3}$ なぜなら $17 - 5 = 12 = 3 \cdot 4$
2. $-7 \equiv 3 \pmod{5}$ なぜなら $-7 - 3 = -10 = 5 \cdot (-2)$
3. $100 \equiv 0 \pmod{4}$ なぜなら $100 - 0 = 100 = 4 \cdot 25$

### 曜日

曜日は法7で巡回します。今日が火曜日（2日目）ならば：
- 10日後：$2 + 10 \equiv 12 \equiv 5 \pmod{7}$（金曜日）
- 100日後：$2 + 100 \equiv 102 \equiv 4 \pmod{7}$（木曜日）

## 合同類

$a$ の $n$ を法とする**合同類**は：
$$[a]_n = \{b \in \mathbb{Z} : b \equiv a \pmod{n}\} = \{a + kn : k \in \mathbb{Z}\}$$

$n$ を法とする合同類はちょうど $n$ 個あり、通常 $\{0, 1, 2, \ldots, n-1\}$ で表されます。

## 他の概念との関連

- 合同類の集合は商群 $\mathbb{Z}/n\mathbb{Z}$ を形成します（@ex-quotient-integers-mod-n 参照）
- [フェルマーの小定理](thm-fermat-little.qmd)とオイラーの定理はモジュラー演算を使います（@thm-euler 参照）
- 素数はモジュラー演算で特別な性質を持ちます（@def-prime 参照）
- ユークリッドの互除法でモジュラー逆元を求められます（@thm-euclidean-algorithm 参照）

## 応用

1. **暗号理論**: RSA暗号、ディフィー・ヘルマン鍵交換
2. **計算機科学**: ハッシュ関数、チェックサム、擬似乱数生成
3. **数論**: ディオファントス方程式の解法、素数判定
4. **誤り検出**: ISBNコード、クレジットカード番号の検証
5. **音楽理論**: ピッチクラスと音程

## 関連項目

- @def-gcd
- @def-prime
- @thm-euler
- @thm-euclidean-algorithm
- @ex-quotient-integers-mod-n
- @ax-induction

## 依存関係グラフ

```{mermaid}
%%| fig-cap: "Local dependency graph"
graph TD
    classDef definition fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef theorem fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef axiom fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef example fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef current fill:#ffebee,stroke:#b71c1c,stroke-width:3px
    def-prime["Definition: Prime Number"]:::definition
    def-gcd["Definition: Greatest Common Divisor"]:::definition
    ex-quotient-integers-mod-n["Example: Integers Modulo n"]:::example
    def-set["Definition: Set"]:::definition
    def-divisibility["Definition: Divisibility"]:::definition
    thm-chinese-remainder["Theorem: Chinese Remainder Theorem"]:::theorem
    ax-induction["Axiom: Mathematical Induction"]:::axiom
    def-congruence["Definition: Congruence (Modular Arithmetic)"]:::definition
    thm-euler["Theorem: Euler's Theorem"]:::theorem
    thm-fermat-little["Theorem: Fermat's Little Theorem"]:::theorem
    thm-euclidean-algorithm["Theorem: Euclidean Algorithm"]:::theorem
    thm-chinese-remainder --> def-congruence
    ex-quotient-integers-mod-n --> def-congruence
    def-congruence --> thm-euclidean-algorithm
    def-congruence --> def-gcd
    def-congruence --> def-prime
    def-congruence --> def-set
    def-congruence --> thm-fermat-little
    def-congruence --> ex-quotient-integers-mod-n
    def-congruence --> def-divisibility
    thm-fermat-little --> def-congruence
    def-gcd --> def-congruence
    thm-euler --> def-congruence
    def-congruence --> thm-euler
    def-congruence --> ax-induction
    class def-congruence current
    click def-prime "def-prime.html" "Definition: Prime Numberへ"
    click def-gcd "def-gcd.html" "Definition: Greatest Common Divisorへ"
    click ex-quotient-integers-mod-n "ex-quotient-integers-mod-n.html" "Example: Integers Modulo nへ"
    click def-set "def-set.html" "Definition: Setへ"
    click def-divisibility "def-divisibility.html" "Definition: Divisibilityへ"
    click thm-chinese-remainder "thm-chinese-remainder.html" "Theorem: Chinese Remainder Theoremへ"
    click ax-induction "ax-induction.html" "Axiom: Mathematical Inductionへ"
    click thm-euler "thm-euler.html" "Theorem: Euler's Theoremへ"
    click thm-fermat-little "thm-fermat-little.html" "Theorem: Fermat's Little Theoremへ"
    click thm-euclidean-algorithm "thm-euclidean-algorithm.html" "Theorem: Euclidean Algorithmへ"
```

## インタラクティブ可視化

ローカルナレッジグラフの近傍をインタラクティブに探索：

::: {.graph-viz data-id="def-congruence" data-width="700" data-height="500"}
:::

次のことができます：
- ノードを**ドラッグ**してレイアウトを再配置
- マウスホイールで**ズーム**イン/アウト
- ノードに**ホバー**して詳細を表示
- [別ウィンドウ](../../output/interactive/def-congruence.html){target="_blank"}で完全なインタラクティブ版を表示
