---
title: "知識グラフ検索"
format:
  html:
    code-fold: true
    code-tools: true
lang: ja
translations:
  en: "../en/search.html"
---

# 数学知識グラフ検索

強化された検索機能で、包括的な数学知識ベースを探索しましょう。

## 検索機能

- **全文検索**: タイトルだけでなく、すべての数学的コンテンツを検索
- **あいまい検索**: わずかなタイプミスがあっても結果を見つける
- **自動サジェスト**: 入力中にサジェストを表示
- **関連コンテンツ**: 各概念の依存関係と例を発見

## インタラクティブ検索

```{=html}
<div id="search-container" style="margin: 2em 0;">
  <div style="display: flex; gap: 1em; margin-bottom: 1em;">
    <input type="text" id="search-input" placeholder="数学的概念を検索..."
           style="flex: 1; padding: 0.5em; font-size: 1.1em; border: 1px solid #ccc; border-radius: 4px;">
    <button id="search-button" onclick="performSearch()"
            style="padding: 0.5em 1.5em; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
      検索
    </button>
  </div>
  <div id="suggestions" style="display: none; border: 1px solid #ddd; border-radius: 4px; background: white; position: relative; z-index: 100;"></div>
</div>

<div id="search-results" style="margin-top: 2em;"></div>

<script>
const API_BASE = 'http://localhost:5001/api';
let searchTimeout = null;

// DOMの準備を待つ
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('search-button');

  if (!searchInput || !searchButton) {
    console.error('検索要素が見つかりません');
    return;
  }

  // デバウンシング付き検索入力
  searchInput.addEventListener('input', function(e) {
  clearTimeout(searchTimeout);
  const query = e.target.value.trim();

  if (query.length >= 2) {
    searchTimeout = setTimeout(() => {
      fetchSuggestions(query);
    }, 300);
  } else {
    document.getElementById('suggestions').style.display = 'none';
  }
  });

  // エンターキーで検索
  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      performSearch();
    }
  });
}); // DOMContentLoadedの終了

// 検索サジェストを取得
async function fetchSuggestions(query) {
  try {
    const response = await fetch(`${API_BASE}/search/suggest?q=${encodeURIComponent(query)}`);
    const data = await response.json();

    const suggestionsDiv = document.getElementById('suggestions');
    if (data.suggestions && data.suggestions.length > 0) {
      suggestionsDiv.innerHTML = data.suggestions.map(s =>
        `<div style="padding: 0.5em; cursor: pointer; hover: background: #f0f0f0;"
              onclick="selectSuggestion('${s}')">${s}</div>`
      ).join('');
      suggestionsDiv.style.display = 'block';
    } else {
      suggestionsDiv.style.display = 'none';
    }
  } catch (error) {
    console.error('サジェストの取得に失敗しました:', error);
  }
}

// サジェストを選択
function selectSuggestion(suggestion) {
  document.getElementById('search-input').value = suggestion;
  document.getElementById('suggestions').style.display = 'none';
  performSearch();
}

// 検索を実行
async function performSearch() {
  const query = document.getElementById('search-input').value.trim();
  if (!query) return;

  document.getElementById('suggestions').style.display = 'none';
  const resultsDiv = document.getElementById('search-results');
  resultsDiv.innerHTML = '<p>検索中...</p>';

  try {
    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}&limit=20`);
    const data = await response.json();

    if (data.results && data.results.length > 0) {
      resultsDiv.innerHTML = `
        <h3>検索結果 (${data.count} 件)</h3>
        <div style="display: grid; gap: 1em;">
          ${data.results.map(result => createResultCard(result)).join('')}
        </div>
      `;
    } else {
      resultsDiv.innerHTML = '<p>結果が見つかりませんでした。別の検索語を試してください。</p>';
    }
  } catch (error) {
    console.error('検索に失敗しました:', error);
    resultsDiv.innerHTML = `
      <div style="border: 1px solid #f0ad4e; background: #fcf8e3; padding: 1em; border-radius: 4px;">
        <h4 style="margin-top: 0; color: #8a6d3b;">検索サービスが利用できません</h4>
        <p style="margin-bottom: 0.5em; color: #8a6d3b;">検索APIは現在利用できません。これは通常、次の場合に発生します：</p>
        <ul style="margin: 0.5em 0; padding-left: 1.5em; color: #8a6d3b;">
          <li>APIサーバーが実行されていない（ローカルセットアップが必要）</li>
          <li>GitHub Pagesでこのページを表示している（APIはローカルでのみ実行）</li>
        </ul>
        <p style="margin-bottom: 0; color: #8a6d3b;">検索機能を使用するには、APIをローカルで実行するか、ナビゲーションメニューを使用してコンテンツを閲覧してください。</p>
      </div>
    `;
  }
}

// 結果カードを作成
function createResultCard(result) {
  const typeColor = {
    'Definition': '#2196F3',
    'Theorem': '#9C27B0',
    'Example': '#4CAF50',
    'Axiom': '#FF9800'
  };

  const typeLabels = {
    'Definition': '定義',
    'Theorem': '定理',
    'Example': '例',
    'Axiom': '公理'
  };

  const sources = result.sources ? result.sources.join(', ') : 'rdf';
  const score = result.combined_score ? result.combined_score.toFixed(2) : result.score?.toFixed(2) || '';

  return `
    <div style="border: 1px solid #ddd; border-radius: 8px; padding: 1em; background: #f9f9f9;">
      <div style="display: flex; justify-content: space-between; align-items: start;">
        <h4 style="margin: 0 0 0.5em 0;">
          <a href="content/${result.path || result.id + '.qmd'}" target="_blank">${result.title}</a>
        </h4>
        <span style="background: ${typeColor[result.type] || '#666'}; color: white; padding: 0.2em 0.5em; border-radius: 4px; font-size: 0.9em;">
          ${typeLabels[result.type] || result.type}
        </span>
      </div>
      ${result.description ? `<p style="margin: 0.5em 0; color: #555;">${result.description}</p>` : ''}
      <div style="display: flex; gap: 1em; font-size: 0.9em; color: #666;">
        ${result.domain ? `<span>分野: ${result.domain}</span>` : ''}
        <span>ソース: ${sources}</span>
        ${score ? `<span>スコア: ${score}</span>` : ''}
      </div>
      <button onclick="loadRelated('${result.id}')" style="margin-top: 0.5em; padding: 0.3em 1em; background: #f0f0f0; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
        関連項目を表示
      </button>
      <div id="related-${result.id}" style="margin-top: 1em; display: none;"></div>
    </div>
  `;
}

// 関連ノードを読み込む
async function loadRelated(nodeId) {
  const relatedDiv = document.getElementById(`related-${nodeId}`);

  if (relatedDiv.style.display === 'block') {
    relatedDiv.style.display = 'none';
    return;
  }

  relatedDiv.innerHTML = '<p>関連コンテンツを読み込み中...</p>';
  relatedDiv.style.display = 'block';

  try {
    const response = await fetch(`${API_BASE}/nodes/${nodeId}/related`);
    const data = await response.json();

    let html = '<div style="display: grid; gap: 1em;">';

    if (data.related.dependencies.length > 0) {
      html += '<div><strong>依存関係:</strong> ' +
              data.related.dependencies.map(d =>
                `<a href="content/${d.id}.qmd" target="_blank">${d.title}</a>`
              ).join(', ') + '</div>';
    }

    if (data.related.dependents.length > 0) {
      html += '<div><strong>使用先:</strong> ' +
              data.related.dependents.map(d =>
                `<a href="content/${d.id}.qmd" target="_blank">${d.title}</a>`
              ).join(', ') + '</div>';
    }

    if (data.related.examples.length > 0) {
      html += '<div><strong>例:</strong> ' +
              data.related.examples.map(e =>
                `<a href="content/${e.id}.qmd" target="_blank">${e.title}</a>`
              ).join(', ') + '</div>';
    }

    html += '</div>';
    relatedDiv.innerHTML = html;

  } catch (error) {
    console.error('関連ノードの読み込みに失敗しました:', error);
    relatedDiv.innerHTML = '<p style="color: red;">関連コンテンツの読み込みに失敗しました。</p>';
  }
}
</script>
```

## 検索例

知識グラフを探索するために、以下の検索例を試してください：

- **"群"** - 代数学における群に関連するすべてのコンテンツを検索
- **"連続"** - 連続性に関連する概念を発見
- **"定理"** - 知識ベース内のすべての定理を閲覧
- **"結合律"** - 結合律に言及するコンテンツを検索
- **"位相"** - 位相的概念を探索

## 検索のヒント

1. **キーワードを使用**: "準同型"、"コンパクト"、"素数"などの特定の数学用語で検索
2. **タイプで検索**: 特定のタイプのコンテンツ（定義、定理、例）を探す
3. **分野を探索**: "代数"、"位相"、"解析"などの分野で検索
4. **つながりをたどる**: 「関連項目を表示」ボタンを使用して依存関係と例を発見
