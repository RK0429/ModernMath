---
title: "数学ナレッジグラフへの貢献"
lang: ja
translations:
  en: "../en/contributing.html"
---

# 数学ナレッジグラフWikiへの貢献

数学ナレッジグラフWikiにご関心をお寄せいただき、ありがとうございます。このプロジェクトは、数学の知識を包括的かつ相互に関連付けて表現することを目指しています。皆様のご協力により、数学を誰もがより利用しやすく、理解しやすいものにすることができます。

## 🎯 貢献の方法

### 貢献の種類

1. **コンテンツの作成**: 新しい数学の概念（定義、定理、例）を記述する
2. **コンテンツのレビュー**: 既存のコンテンツを査読し、改善する
3. **相互参照の追加**: 関連する概念間の不足しているリンクを追加する
4. **形式検証**: 数学的な命題にLean 4による証明を追加する
5. **バグ報告**: ウェブサイトやコンテンツに関する問題を報告する
6. **機能リクエスト**: 新しい機能や改善点を提案する

### 貢献の始め方

1. **リポジトリをフォークする**
   ```bash
   git clone https://github.com/RK0429/ModernMath.git
   cd ModernMath
   ```

2. **開発環境をセットアップする**
   ```bash
   poetry install
   quarto check
   ```

3. **新しいブランチを作成する**
   ```bash
   git checkout -b feature/your-feature-name
   ```

## 📝 コンテンツ作成のガイドライン

### ファイル構造

各数学の概念は、それぞれ独立した`.qmd`ファイルで管理します。
- 定義: `content/{domain}/def-{concept}.qmd`
- 定理: `content/{domain}/thm-{theorem-name}.qmd`
- 例: `content/{domain}/ex-{example-name}.qmd`
- 公理: `content/{domain}/ax-{axiom-name}.qmd`

### 必須メタデータ

すべての`.qmd`ファイルには、以下の形式でYAMLフロントマターを含める必要があります。

```yaml
---
title: "定義：群"
id: "def-group"
type: "Definition"
status: "draft|complete|verified"
requires:
  - "def-set"
  - "def-binary-operation"
lean_id: "Mathlib.Algebra.Group.Defs.Group" # オプション
---
```

### コンテンツの形式

```markdown
# 定義：群 {#def-group}

**群**とは、@def-set $G$と@def-binary-operation の組であり、...

## 性質

1. **閉性**: すべての$a, b \in G$に対して、$a \cdot b \in G$が成り立つ
2. **結合法則**: すべての$a, b, c \in G$に対して、$(a \cdot b) \cdot c = a \cdot (b \cdot c)$が成り立つ
...

## 例

- 整数$\mathbb{Z}$は、加法において群をなす（@ex-integers-addition を参照）
- $n \times n$の正則行列の集合は、乗法において群をなす
```

### 相互参照のガイドライン

他の概念へは、必ず`@`構文を用いてリンクしてください。
- `@def-group` - 群の定義へのリンク
- `@thm-lagrange` - ラグランジュの定理へのリンク
- `@ex-integers-addition` - 例へのリンク

**重要**: 独立したページを持つ数学の概念に言及する際は、必ずリンクを作成してください。

## 🔧 技術的なガイドライン

### ナレッジグラフの構築

提出前に、以下の手順を実行してください。

1. **メタデータの検証**
   ```bash
   poetry run python scripts/validate_metadata.py
   ```

2. **グラフの構築**
   ```bash
   poetry run python scripts/build_graph.py
   ```

3. **可視化の生成**
   ```bash
   poetry run python scripts/generate_pyvis.py
   poetry run python scripts/fix_pyvis_css.py
   ```

4. **変更内容のプレビュー**
   ```bash
   quarto preview
   ```

### コードの品質

- リンティングの実行: `poetry run flake8 scripts/`
- コードのフォーマット: `poetry run black scripts/`
- 型チェック: `poetry run mypy scripts/`

## 🤖 自動チェック

CI/CDパイプラインは、以下の項目を自動的にチェックします。
- すべてのYAMLメタデータの検証
- 壊れた相互参照のチェック
- ナレッジグラフの構築
- 可視化の生成
- 不足している相互参照のLLMによるレビュー

## 📊 数学の分野

コンテンツは、以下の分野別に整理されています。

| 分野 | ディレクトリ | 主な内容 |
|------|-------------|----------|
| 代数学 | `content/algebra/` | 群、環、体、線形代数 |
| 解析学 | `content/analysis/` | 極限、微分、積分 |
| 位相空間論 | `content/topology/` | 位相空間、コンパクト性、連結性 |
| 幾何学 | `content/geometry/` | ユークリッド幾何学、距離空間 |
| 数論 | `content/number-theory/` | 素数、整除性 |
| 組合せ論 | `content/combinatorics/` | 数え上げ、グラフ理論 |
| 論理学と集合論 | `content/logic-set-theory/` | 集合、論理、数学の基礎 |
| 確率論と統計学 | `content/probability-statistics/` | 確率空間、確率分布 |
| 圏論 | `content/category-theory/` | 圏、関手、自然変換 |

## 🚀 提出のプロセス

1. **ローカルでの変更内容のテスト**
   - すべてのリンクが正しく解決されることを確認する
   - 可視化が適切に生成されることを確認する
   - サイトがエラーなくビルドされることを確認する

2. **変更をコミットする**
   ```bash
   git add .
   git commit -m "feat: コンパクト空間の定義を追加"
   ```

3. **プッシュしてプルリクエストを作成する**
   ```bash
   git push origin feature/your-feature-name
   ```
   その後、GitHubでプルリクエストを作成します。

4. **プルリクエストのガイドライン**
   - 内容が分かりやすいタイトルを付ける
   - 関連するIssueを参照する
   - 追加・変更した内容を説明する
   - 必要に応じてスクリーンショットを添付する

## 🎓 スタイルガイド

### 数学の記法

- すべての数式にLaTeXを使用する
- 初めて使用する記法は、その場で定義する
- 標準的な数学の慣習に沿って、表記を統一する

### 文章のスタイル

- 明確で分かりやすい言葉で記述する
- 専門用語は、初めて使用する際に定義する
- 形式的な定義と併せて、直感的な説明も加える
- 抽象的な概念を説明するために、具体例を盛り込む

### 定理環境

Quartoの定理環境を使用してください。

```markdown
::: {.theorem #thm-unique-identity}
**単位元の一意性**

任意の群$(G, \cdot)$において、単位元は一意に定まる。
:::

::: {.proof}
$e$と$e'$がともに単位元であると仮定すると、...
:::
```

## 🤝 コミュニティガイドライン

- 議論の際は、敬意を払い、建設的な意見を心がける
- 新しい参加者を歓迎し、プロジェクトへの参加を支援する
- 貢献者のクレジットを適切に表示する
- 数学的な正確さと明確さを重視する

## 📚 参考資料

- [Quartoドキュメント](https://quarto.org/docs/)
- [RDF/OWL入門](https://www.w3.org/TR/owl2-primer/)
- [Lean 4ドキュメント](https://leanprover.github.io/lean4/doc/)
- [プロジェクトのアーキテクチャ](../../design_JA/knowledge_graph.md)

## ❓ ヘルプ

- **質問**: [GitHubディスカッション](https://github.com/RK0429/ModernMath/discussions)でスレッドを立てる
- **バグ報告**: [Issue](https://github.com/RK0429/ModernMath/issues)を作成する
- **チャット**: コミュニティに参加する（近日公開予定）

数学の知識を誰もが利用できる、包括的なリソースを構築するために、ご協力をお願いいたします。
