name: Build Multilingual Math Knowledge Graph

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Grant write permissions for deployment
permissions:
  contents: write
  pages: write
  id-token: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Step 2a: Install Poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    # Step 2b: Load cached dependencies
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # Step 2c: Install dependencies
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # Step 2d: Install Google Chrome
    - name: Install Google Chrome
      id: setup-chrome
      uses: browser-actions/setup-chrome@v2
      with:
        install-dependencies: true

    # Step 3: Install Quarto
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 4: Run linting
    - name: Run flake8
      run: |
        poetry run flake8 scripts/ --max-line-length=100 --extend-ignore=E203,E226,W503,W293

    - name: Run black check
      run: |
        poetry run black --check scripts/

    # Step 5: Run validation scripts
    - name: Validate YAML metadata
      run: |
        poetry run python scripts/validate_metadata.py

    - name: Check cross-references
      run: |
        poetry run python scripts/check_cross_references.py
        echo "Cross-reference validation completed successfully!"

    - name: Validate existing graph
      run: |
        if [ -f "knowledge_graph.ttl" ]; then
          poetry run python scripts/validate_graph.py
        fi

    # Step 6: Build knowledge graph
    - name: Build knowledge graph
      run: |
        poetry run python scripts/build_graph.py

    - name: Display graph statistics
      run: |
        if [ -f "knowledge_graph.ttl" ]; then
          echo "Knowledge graph built successfully!"
          wc -l knowledge_graph.ttl
        fi

    # Step 6a: Formal verification integration
    - name: Extract Lean dependencies (if available)
      run: |
        if [ -d "formal/" ]; then
          poetry run python scripts/extract_lean_deps.py || echo "Lean dependency extraction skipped"
        fi

    - name: Extract Lean mappings
      run: |
        if [ -d "formal/" ]; then
          poetry run python scripts/extract_lean_mappings.py || echo "Lean mapping extraction skipped"
        fi

    - name: Verify consistency with formal proofs
      run: |
        if [ -f "lean_mappings.json" ]; then
          poetry run python scripts/verify_consistency.py
          echo "Formal verification report generated"
        fi

    - name: Add verification triples to graph
      run: |
        if [ -f "lean_mappings.json" ]; then
          poetry run python scripts/add_verification_triples.py
          echo "Verification triples added to knowledge graph"
        fi

    # Step 6b: Add click directives to Mermaid diagrams
    - name: Add click directives to Mermaid diagrams
      run: |
        poetry run python scripts/add_mermaid_links.py

    # Step 6c: Generate Mermaid diagrams
    - name: Generate Mermaid diagrams
      run: |
        poetry run python scripts/generate_mermaid.py

    # Step 6d: Generate PyVis interactive visualizations
    - name: Generate PyVis interactive visualizations
      run: |
        poetry run python scripts/generate_pyvis.py

    # Step 6e: Fix PyVis CSS paths
    - name: Fix PyVis CSS paths
      run: |
        poetry run python scripts/fix_pyvis_css.py

    # Step 6f: Generate D3.js data files
    - name: Generate D3.js data files
      run: |
        poetry run python scripts/generate_d3_data.py

    # Step 6g: Generate comprehensive index pages
    - name: Generate index pages for all domains
      run: |
        poetry run python scripts/generate_index_pages.py
        echo "Index pages generated successfully!"

    # Step 6h: Resolve cross-references
    - name: Resolve cross-references
      run: |
        poetry run python scripts/resolve_cross_references.py
        echo "Cross-references resolved successfully!"

    # Step 6i: Insert diagrams into content
    - name: Insert diagrams into content
      run: |
        poetry run python scripts/insert_diagrams.py

    # Step 6j: Build search index
    - name: Build search index
      run: |
        poetry run python scripts/build_search_index.py
        echo "Search index built successfully!"

    # Step 7: Render Quarto site for multiple languages
    - name: Render English site
      env:
        QUARTO_CHROMIUM: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: |
        echo "Building English version..."
        quarto render --profile en

    - name: Render Japanese site
      env:
        QUARTO_CHROMIUM: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: |
        echo "Building Japanese version..."
        quarto render --profile ja

    # Step 7: Copy shared resources to root
    - name: Copy shared resources to root
      run: |
        echo "Copying shared resources to root..."
        # Copy output directories to the root _site directory
        if [ -d "output" ]; then
          cp -r output _site/
          echo "Copied output directory to _site/"
        fi
        # Copy knowledge graph and other shared resources
        if [ -f "knowledge_graph.ttl" ]; then
          cp knowledge_graph.ttl _site/
          echo "Copied knowledge_graph.ttl to _site/"
        fi
        # List the contents to verify
        echo "Contents of _site/output/:"
        ls -la _site/output/ || echo "No output directory in _site"

    # Step 7a: Fix Japanese index page
    - name: Fix Japanese index page
      run: |
        echo "Fixing Japanese index page..."
        poetry run python scripts/fix_japanese_index.py

    # Step 7b: Create root index.html for language detection
    - name: Create language redirect page
      run: |
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Math Knowledge Graph - 数学知識グラフ</title>
            <script>
                // Detect user language preference
                const userLang = navigator.language || navigator.userLanguage;
                const lang = userLang.startsWith('ja') ? 'ja' : 'en';
                window.location.href = './' + lang + '/index.html';
            </script>
        </head>
        <body>
            <p>Redirecting to your preferred language...</p>
            <p>言語設定に基づいてリダイレクトしています...</p>
            <p>
                <a href="./en/index.html">English</a> |
                <a href="./ja/index.html">日本語</a>
            </p>
        </body>
        </html>
        EOF

    # Step 7d: Create .nojekyll file for GitHub Pages
    - name: Create .nojekyll file
      run: |
        touch _site/.nojekyll

    # Step 8: Upload artifacts
    - name: Upload knowledge graph
      uses: actions/upload-artifact@v4
      with:
        name: knowledge-graph-${{ matrix.python-version }}
        path: knowledge_graph.ttl
        retention-days: 30

    - name: Upload interactive visualizations
      uses: actions/upload-artifact@v4
      with:
        name: interactive-viz-${{ matrix.python-version }}
        path: output/interactive/
        retention-days: 30

    - name: Upload D3.js data files
      uses: actions/upload-artifact@v4
      with:
        name: d3-data-${{ matrix.python-version }}
        path: output/d3-data/
        retention-days: 30

    - name: Upload rendered site
      uses: actions/upload-artifact@v4
      with:
        name: rendered-site-multilingual-${{ matrix.python-version }}
        path: _site/
        retention-days: 30

    # Optional: Deploy to GitHub Pages (only on main branch, Python 3.11)
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.11' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site
        publish_branch: gh-pages
        # Uncomment and update if you have a custom domain:
        # cname: mathwiki.yourdomain.com
