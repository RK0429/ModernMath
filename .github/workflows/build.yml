name: Build Multilingual Math Knowledge Graph

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - 'content/**'
      - '_extensions/**'
      - 'formal/**'
      - '*.yml'
      - '*.qmd'
      - 'poetry.lock'
      - 'pyproject.toml'
      - '.github/workflows/build.yml'
      - '!docs/**/*.md'
      - '!README.md'
      - '!CLAUDE.md'
      - '!LICENSE'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'content/**'
      - '_extensions/**'
      - 'formal/**'
      - '*.yml'
      - '*.qmd'
      - 'poetry.lock'
      - 'pyproject.toml'
      - '.github/workflows/build.yml'

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.ref }}-build
  cancel-in-progress: true

# Grant write permissions for deployment
permissions:
  contents: write
  pages: write
  id-token: write
  packages: read

jobs:
  # Job 1: Code quality and validation checks
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with Poetry cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry CLI
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Check Poetry version
      run: poetry --version

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Generate cache key for other jobs
      id: cache-key
      run: echo "key=deps-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

    - name: Run linting (black + flake8)
      run: |
        echo "=== Running code quality checks ==="
        poetry run black --check scripts/
        poetry run flake8 scripts/ --max-line-length=100 --extend-ignore=E203,E226,W503,W293

    - name: Validate YAML metadata
      run: poetry run python scripts/validation/validate_metadata.py

    - name: Check cross-references
      run: |
        poetry run python scripts/validation/check_cross_references.py
        echo "✓ Cross-reference validation completed"

  # Job 2: Build and validate knowledge graph
  graph:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with Poetry cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'poetry'
        cache-dependency-path: '**/poetry.lock'

    - name: Install Poetry CLI
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Check Poetry version
      run: poetry --version

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Validate existing graph
      run: |
        if [ -f "knowledge_graph.ttl" ]; then
          poetry run python scripts/graph/validate_graph.py
          echo "✓ Existing graph validated"
        else
          echo "No existing graph to validate"
        fi

    - name: Build knowledge graph
      run: |
        poetry run python scripts/graph/build_graph.py
        echo "✓ Knowledge graph built successfully"
        wc -l knowledge_graph.ttl

    - name: Process formal verification (if available)
      run: |
        if [ -d "formal/" ]; then
          echo "Processing formal verification..."

          # Extract Lean dependencies
          if poetry run python scripts/experimental/extract_lean_deps.py; then
            echo "✓ Lean dependencies extracted"
          else
            echo "⚠ Lean dependency extraction failed or not applicable"
          fi

          # Extract Lean mappings
          if poetry run python scripts/experimental/extract_lean_mappings.py; then
            echo "✓ Lean mappings extracted"
          else
            echo "⚠ Lean mapping extraction failed or not applicable"
          fi

          # Verify consistency and add triples if mappings exist
          if [ -f "lean_mappings.json" ]; then
            poetry run python scripts/validation/verify_consistency.py
            echo "✓ Formal verification report generated"

            poetry run python scripts/graph/add_verification_triples.py
            echo "✓ Verification triples added to knowledge graph"
          else
            echo "⚠ No Lean mappings found, skipping verification"
          fi
        else
          echo "No formal verification directory found"
        fi

    - name: Upload knowledge graph artifact
      uses: actions/upload-artifact@v4
      with:
        name: knowledge-graph
        path: knowledge_graph.ttl
        retention-days: 30

    - name: Upload Lean mappings (if available)
      if: success() && hashFiles('lean_mappings.json') != ''
      uses: actions/upload-artifact@v4
      with:
        name: lean-mappings
        path: lean_mappings.json
        retention-days: 30

  # Job 3: Generate visualizations in parallel
  visualizations:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality, graph]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with Poetry cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'poetry'
        cache-dependency-path: '**/poetry.lock'

    - name: Install Poetry CLI
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Check Poetry version
      run: poetry --version

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Download knowledge graph
      uses: actions/download-artifact@v4
      with:
        name: knowledge-graph

    - name: Generate visualizations in parallel
      run: |
        echo "=== Generating visualizations in parallel ==="

        # Start all visualization scripts in parallel
        poetry run python scripts/visualization/generate_mermaid.py &
        PID1=$!

        poetry run python scripts/visualization/generate_pyvis_with_fix.py &
        PID2=$!

        poetry run python scripts/visualization/generate_d3_data.py &
        PID3=$!

        # Wait for all scripts to complete
        wait $PID1
        echo "✓ Mermaid diagrams generated"

        wait $PID2
        echo "✓ PyVis visualizations generated"

        wait $PID3
        echo "✓ D3.js data files generated"

    - name: Upload visualization artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visualizations
        path: output/
        retention-days: 30

  # Job 4: Build multilingual site (using matrix for parallel language builds)
  site:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, graph, visualizations]
    strategy:
      matrix:
        language: [en, ja]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with Poetry cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'poetry'
        cache-dependency-path: '**/poetry.lock'

    - name: Install Poetry CLI
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Check Poetry version
      run: poetry --version

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Cache Quarto
      uses: actions/cache@v4
      with:
        path: ~/.quarto
        key: quarto-${{ runner.os }}-${{ hashFiles('.github/workflows/build.yml') }}

    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache Chrome
      uses: actions/cache@v4
      with:
        path: ~/.cache/puppeteer
        key: chrome-${{ runner.os }}

    - name: Install Google Chrome
      id: setup-chrome
      uses: browser-actions/setup-chrome@v2
      with:
        install-dependencies: true

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Generate site content
      run: |
        echo "=== Generating site content for ${{ matrix.language }} ==="

        # Generate index pages
        poetry run python scripts/site/generate_index_pages.py
        echo "✓ Index pages generated"

        # Resolve cross-references
        poetry run python scripts/site/resolve_cross_references.py
        echo "✓ Cross-references resolved"

        # Insert diagrams
        poetry run python scripts/visualization/insert_diagrams.py
        echo "✓ Diagrams inserted"

        # Build search index
        poetry run python scripts/site/build_search_index.py
        echo "✓ Search index built"

        # Remove title prefixes
        poetry run python scripts/site/remove_title_prefixes.py
        echo "✓ Title prefixes removed"

    - name: Render ${{ matrix.language }} site
      env:
        QUARTO_CHROMIUM: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: |
        echo "Building ${{ matrix.language }} version..."
        quarto render --profile ${{ matrix.language }}

    - name: Post-process ${{ matrix.language }} site
      if: matrix.language == 'ja'
      run: |
        poetry run python scripts/translation/fix_japanese_index.py
        echo "✓ Japanese index page fixed"

    - name: Upload ${{ matrix.language }} site
      uses: actions/upload-artifact@v4
      with:
        name: site-${{ matrix.language }}
        path: _site/${{ matrix.language }}/
        retention-days: 30

  # Job 5: Combine sites and deploy
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: site
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all site artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: site-*
        path: _site/

    - name: Download other artifacts
      uses: actions/download-artifact@v4
      with:
        name: knowledge-graph
        path: _site/

    - name: Download visualizations
      uses: actions/download-artifact@v4
      with:
        name: visualizations
        path: _site/output/

    - name: Create language routing
      run: |
        # Move language-specific sites to correct paths
        mkdir -p _site/en _site/ja
        if [ -d "_site/site-en" ]; then
          mv _site/site-en/* _site/en/ || true
          rmdir __site/site-en || true
        fi
        if [ -d "_site/site-ja" ]; then
          mv _site/site-ja/* _site/ja/ || true
          rmdir __site/site-ja || true
        fi

        # Create root index.html for language detection
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Math Knowledge Graph - 数学ナレッジグラフ</title>
            <script>
                // Detect user language preference
                const userLang = navigator.language || navigator.userLanguage;
                const lang = userLang.startsWith('ja') ? 'ja' : 'en';
                window.location.href = './' + lang + '/index.html';
            </script>
        </head>
        <body>
            <p>Redirecting to your preferred language...</p>
            <p>言語設定に基づいてリダイレクトしています...</p>
            <p>
                <a href="./en/index.html">English</a> |
                <a href="./ja/index.html">日本語</a>
            </p>
        </body>
        </html>
        EOF

        # Create .nojekyll file
        touch _site/.nojekyll

        echo "✓ Site structure prepared for deployment"
        echo "Verifying structure:"
        [ -d "_site/en" ] && echo "✓ English site present" || echo "⚠ English site missing"
        [ -d "_site/ja" ] && echo "✓ Japanese site present" || echo "⚠ Japanese site missing"
        [ -d "_site/output" ] && echo "✓ Output directory present" || echo "⚠ Output directory missing"

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site
        publish_branch: gh-pages

    - name: Report deployment status
      run: |
        echo "✅ Site deployed to GitHub Pages"
        echo "Visit: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
