name: Build Multilingual Math Knowledge Graph

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Grant write permissions for deployment
permissions:
  contents: write
  pages: write
  id-token: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Step 2a: Install Poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    # Step 2b: Load cached dependencies
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # Step 2c: Install dependencies
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # Step 2d: Install Google Chrome
    - name: Install Google Chrome
      id: setup-chrome
      uses: browser-actions/setup-chrome@v2
      with:
        install-dependencies: true

    # Step 3: Install Quarto
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 3a: Build summary
    - name: Display build configuration
      run: |
        echo "=== Build Configuration ==="
        echo "Python version: ${{ matrix.python-version }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"
        echo "Runner: ${{ runner.os }}"
        echo ""
        echo "=== Build Steps ==="
        echo "1. Code quality checks (linting)"
        echo "2. Content validation"
        echo "3. Knowledge graph generation"
        echo "4. Visualization generation (Mermaid, PyVis, D3.js)"
        echo "5. Site content generation"
        echo "6. Multilingual site rendering (EN/JA)"
        echo "7. Post-processing and deployment preparation"
        [ "${{ github.ref }}" == "refs/heads/main" ] && echo "8. Deploy to GitHub Pages ✓" || echo "8. Deploy to GitHub Pages (skipped - not main branch)"
        echo "=========================="

    # Step 4: Run linting
    - name: Run flake8
      run: |
        poetry run flake8 scripts/ --max-line-length=100 --extend-ignore=E203,E226,W503,W293

    - name: Run black check
      run: |
        poetry run black --check scripts/

    # Step 5: Run validation scripts
    - name: Validate YAML metadata
      run: |
        poetry run python scripts/validation/validate_metadata.py

    - name: Check cross-references
      run: |
        poetry run python scripts/validation/check_cross_references.py
        echo "Cross-reference validation completed successfully!"

    - name: Validate existing graph
      run: |
        if [ -f "knowledge_graph.ttl" ]; then
          poetry run python scripts/graph/validate_graph.py
          echo "Existing graph validated successfully!"
        else
          echo "No existing graph to validate, skipping..."
        fi

    # Step 6: Build knowledge graph
    - name: Build knowledge graph
      run: |
        poetry run python scripts/graph/build_graph.py

    - name: Display graph statistics
      run: |
        if [ -f "knowledge_graph.ttl" ]; then
          echo "Knowledge graph built successfully!"
          wc -l knowledge_graph.ttl
        fi

    # Step 6a: Formal verification integration (optional)
    - name: Process formal verification (if available)
      run: |
        if [ -d "formal/" ]; then
          echo "Formal verification directory found, processing..."

          # Extract Lean dependencies
          if poetry run python scripts/experimental/extract_lean_deps.py; then
            echo "✓ Lean dependencies extracted"
          else
            echo "⚠ Lean dependency extraction failed or not applicable"
          fi

          # Extract Lean mappings
          if poetry run python scripts/experimental/extract_lean_mappings.py; then
            echo "✓ Lean mappings extracted"
          else
            echo "⚠ Lean mapping extraction failed or not applicable"
          fi

          # Verify consistency and add triples if mappings exist
          if [ -f "lean_mappings.json" ]; then
            poetry run python scripts/validation/verify_consistency.py
            echo "✓ Formal verification report generated"

            poetry run python scripts/graph/add_verification_triples.py
            echo "✓ Verification triples added to knowledge graph"
          else
            echo "⚠ No Lean mappings found, skipping verification"
          fi
        else
          echo "No formal verification directory found, skipping..."
        fi

    # Step 6b: Generate all visualizations
    - name: Generate Mermaid diagrams
      run: |
        poetry run python scripts/visualization/generate_mermaid.py
        echo "Mermaid diagrams generated (isolated nodes skipped)"

    - name: Generate PyVis visualizations with CSS fix
      run: |
        poetry run python scripts/visualization/generate_pyvis_with_fix.py
        echo "PyVis visualizations generated and CSS paths fixed"

    - name: Generate D3.js data files
      run: |
        poetry run python scripts/visualization/generate_d3_data.py
        echo "D3.js data files generated"

    # Step 6c: Generate site content
    - name: Generate index pages for all domains
      run: |
        poetry run python scripts/site/generate_index_pages.py
        echo "Index pages generated successfully!"

    - name: Resolve cross-references
      run: |
        poetry run python scripts/site/resolve_cross_references.py
        echo "Cross-references resolved successfully!"

    - name: Insert diagrams into content
      run: |
        poetry run python scripts/visualization/insert_diagrams.py
        echo "Diagrams inserted (only nodes with valid diagrams)"

    - name: Build search index
      run: |
        poetry run python scripts/site/build_search_index.py
        echo "Search index built successfully!"

    - name: Remove title prefixes from articles
      run: |
        poetry run python scripts/site/remove_title_prefixes.py
        echo "Title prefixes removed successfully!"

    # Step 7: Render Quarto site for multiple languages
    - name: Render English site
      env:
        QUARTO_CHROMIUM: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: |
        echo "Building English version..."
        quarto render --profile en

    - name: Render Japanese site
      env:
        QUARTO_CHROMIUM: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: |
        echo "Building Japanese version..."
        quarto render --profile ja

    # Step 8: Post-processing and finalization
    - name: Fix Japanese index page
      run: |
        echo "Fixing Japanese index page..."
        poetry run python scripts/translation/fix_japanese_index.py
        echo "Japanese index page fixed"

    - name: Inject Buy Me a Coffee button
      run: |
        echo "Injecting Buy Me a Coffee button into all pages..."
        poetry run python scripts/site/inject_buy_me_coffee.py
        echo "Buy Me a Coffee button injection completed"

    - name: Copy shared resources to site root
      run: |
        echo "Copying shared resources to root..."
        # Copy output directories to the root _site directory
        if [ -d "output" ]; then
          cp -r output _site/
          echo "✓ Copied output directory to _site/"
        else
          echo "⚠ No output directory to copy"
        fi

        # Copy knowledge graph and other shared resources
        if [ -f "knowledge_graph.ttl" ]; then
          cp knowledge_graph.ttl _site/
          echo "✓ Copied knowledge_graph.ttl to _site/"
        fi

        # Verify key directories exist
        echo "Verifying site structure:"
        [ -d "_site/output/d3-data/en" ] && echo "✓ D3 data (EN) present" || echo "⚠ D3 data (EN) missing"
        [ -d "_site/output/d3-data/ja" ] && echo "✓ D3 data (JA) present" || echo "⚠ D3 data (JA) missing"
        [ -d "_site/output/interactive/en" ] && echo "✓ Interactive viz (EN) present" || echo "⚠ Interactive viz (EN) missing"
        [ -d "_site/output/interactive/ja" ] && echo "✓ Interactive viz (JA) present" || echo "⚠ Interactive viz (JA) missing"

    - name: Create language detection and routing
      run: |
        # Create root index.html for language detection
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Math Knowledge Graph - 数学ナレッジグラフ</title>
            <script>
                // Detect user language preference
                const userLang = navigator.language || navigator.userLanguage;
                const lang = userLang.startsWith('ja') ? 'ja' : 'en';
                window.location.href = './' + lang + '/index.html';
            </script>
        </head>
        <body>
            <p>Redirecting to your preferred language...</p>
            <p>言語設定に基づいてリダイレクトしています...</p>
            <p>
                <a href="./en/index.html">English</a> |
                <a href="./ja/index.html">日本語</a>
            </p>
        </body>
        </html>
        EOF
        echo "✓ Language detection page created"

        # Create .nojekyll file for GitHub Pages
        touch _site/.nojekyll
        echo "✓ .nojekyll file created"

    # Step 9: Upload artifacts
    - name: Upload knowledge graph
      uses: actions/upload-artifact@v4
      with:
        name: knowledge-graph-${{ matrix.python-version }}
        path: knowledge_graph.ttl
        retention-days: 30

    - name: Upload interactive visualizations
      uses: actions/upload-artifact@v4
      with:
        name: interactive-viz-${{ matrix.python-version }}
        path: output/interactive/
        retention-days: 30

    - name: Upload D3.js data files
      uses: actions/upload-artifact@v4
      with:
        name: d3-data-${{ matrix.python-version }}
        path: output/d3-data/
        retention-days: 30

    - name: Upload rendered site
      uses: actions/upload-artifact@v4
      with:
        name: rendered-site-multilingual-${{ matrix.python-version }}
        path: _site/
        retention-days: 30

    # Step 10: Deploy to GitHub Pages (only on main branch push with Python 3.12)
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site
        publish_branch: gh-pages
        # Uncomment and update if you have a custom domain:
        # cname: mathwiki.yourdomain.com

    - name: Report deployment status
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12' && github.event_name == 'push'
      run: |
        echo "✅ Site deployed to GitHub Pages"
        echo "Visit: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
