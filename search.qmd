---
title: "Knowledge Graph Search"
format:
  html:
    code-fold: true
    code-tools: true
---

# Mathematical Knowledge Graph Search

Explore our comprehensive mathematical knowledge base with enhanced search capabilities.

## Search Features

- **Full-text search**: Search across all mathematical content, not just titles
- **Fuzzy matching**: Find results even with slight typos
- **Auto-suggestions**: Get suggestions as you type
- **Related content**: Discover dependencies and examples for each concept

## Interactive Search

<div id="search-container" style="margin: 2em 0;">
  <div style="display: flex; gap: 1em; margin-bottom: 1em;">
    <input type="text" id="search-input" placeholder="Search for mathematical concepts..."
           style="flex: 1; padding: 0.5em; font-size: 1.1em; border: 1px solid #ccc; border-radius: 4px;">
    <button id="search-button" onclick="performSearch()"
            style="padding: 0.5em 1.5em; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
      Search
    </button>
  </div>
  <div id="suggestions" style="display: none; border: 1px solid #ddd; border-radius: 4px; background: white; position: relative; z-index: 100;"></div>
</div>

<div id="search-results" style="margin-top: 2em;"></div>

<script>
const API_BASE = 'http://localhost:5001/api';
let searchTimeout = null;

// Search input with debouncing
document.getElementById('search-input').addEventListener('input', function(e) {
  clearTimeout(searchTimeout);
  const query = e.target.value.trim();

  if (query.length >= 2) {
    searchTimeout = setTimeout(() => {
      fetchSuggestions(query);
    }, 300);
  } else {
    document.getElementById('suggestions').style.display = 'none';
  }
});

// Enter key to search
document.getElementById('search-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    performSearch();
  }
});

// Fetch search suggestions
async function fetchSuggestions(query) {
  try {
    const response = await fetch(`${API_BASE}/search/suggest?q=${encodeURIComponent(query)}`);
    const data = await response.json();

    const suggestionsDiv = document.getElementById('suggestions');
    if (data.suggestions && data.suggestions.length > 0) {
      suggestionsDiv.innerHTML = data.suggestions.map(s =>
        `<div style="padding: 0.5em; cursor: pointer; hover: background: #f0f0f0;"
              onclick="selectSuggestion('${s}')">${s}</div>`
      ).join('');
      suggestionsDiv.style.display = 'block';
    } else {
      suggestionsDiv.style.display = 'none';
    }
  } catch (error) {
    console.error('Failed to fetch suggestions:', error);
  }
}

// Select a suggestion
function selectSuggestion(suggestion) {
  document.getElementById('search-input').value = suggestion;
  document.getElementById('suggestions').style.display = 'none';
  performSearch();
}

// Perform search
async function performSearch() {
  const query = document.getElementById('search-input').value.trim();
  if (!query) return;

  document.getElementById('suggestions').style.display = 'none';
  const resultsDiv = document.getElementById('search-results');
  resultsDiv.innerHTML = '<p>Searching...</p>';

  try {
    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}&limit=20`);
    const data = await response.json();

    if (data.results && data.results.length > 0) {
      resultsDiv.innerHTML = `
        <h3>Search Results (${data.count} found)</h3>
        <div style="display: grid; gap: 1em;">
          ${data.results.map(result => createResultCard(result)).join('')}
        </div>
      `;
    } else {
      resultsDiv.innerHTML = '<p>No results found. Try different search terms.</p>';
    }
  } catch (error) {
    console.error('Search failed:', error);
    resultsDiv.innerHTML = '<p style="color: red;">Search failed. Please check if the API is running.</p>';
  }
}

// Create result card
function createResultCard(result) {
  const typeColor = {
    'Definition': '#2196F3',
    'Theorem': '#9C27B0',
    'Example': '#4CAF50',
    'Axiom': '#FF9800'
  };

  const sources = result.sources ? result.sources.join(', ') : 'rdf';
  const score = result.combined_score ? result.combined_score.toFixed(2) : result.score?.toFixed(2) || '';

  return `
    <div style="border: 1px solid #ddd; border-radius: 8px; padding: 1em; background: #f9f9f9;">
      <div style="display: flex; justify-content: space-between; align-items: start;">
        <h4 style="margin: 0 0 0.5em 0;">
          <a href="content/${result.path || result.id + '.qmd'}" target="_blank">${result.title}</a>
        </h4>
        <span style="background: ${typeColor[result.type] || '#666'}; color: white; padding: 0.2em 0.5em; border-radius: 4px; font-size: 0.9em;">
          ${result.type}
        </span>
      </div>
      ${result.description ? `<p style="margin: 0.5em 0; color: #555;">${result.description}</p>` : ''}
      <div style="display: flex; gap: 1em; font-size: 0.9em; color: #666;">
        ${result.domain ? `<span>Domain: ${result.domain}</span>` : ''}
        <span>Source: ${sources}</span>
        ${score ? `<span>Score: ${score}</span>` : ''}
      </div>
      <button onclick="loadRelated('${result.id}')" style="margin-top: 0.5em; padding: 0.3em 1em; background: #f0f0f0; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
        Show Related
      </button>
      <div id="related-${result.id}" style="margin-top: 1em; display: none;"></div>
    </div>
  `;
}

// Load related nodes
async function loadRelated(nodeId) {
  const relatedDiv = document.getElementById(`related-${nodeId}`);

  if (relatedDiv.style.display === 'block') {
    relatedDiv.style.display = 'none';
    return;
  }

  relatedDiv.innerHTML = '<p>Loading related content...</p>';
  relatedDiv.style.display = 'block';

  try {
    const response = await fetch(`${API_BASE}/nodes/${nodeId}/related`);
    const data = await response.json();

    let html = '<div style="display: grid; gap: 1em;">';

    if (data.related.dependencies.length > 0) {
      html += '<div><strong>Dependencies:</strong> ' +
              data.related.dependencies.map(d =>
                `<a href="content/${d.id}.qmd" target="_blank">${d.title}</a>`
              ).join(', ') + '</div>';
    }

    if (data.related.dependents.length > 0) {
      html += '<div><strong>Used by:</strong> ' +
              data.related.dependents.map(d =>
                `<a href="content/${d.id}.qmd" target="_blank">${d.title}</a>`
              ).join(', ') + '</div>';
    }

    if (data.related.examples.length > 0) {
      html += '<div><strong>Examples:</strong> ' +
              data.related.examples.map(e =>
                `<a href="content/${e.id}.qmd" target="_blank">${e.title}</a>`
              ).join(', ') + '</div>';
    }

    html += '</div>';
    relatedDiv.innerHTML = html;

  } catch (error) {
    console.error('Failed to load related nodes:', error);
    relatedDiv.innerHTML = '<p style="color: red;">Failed to load related content.</p>';
  }
}
</script>

## Example Searches

Try these example searches to explore the knowledge graph:

- **"group"** - Find all content related to groups in algebra
- **"continuous"** - Discover concepts related to continuity
- **"theorem"** - Browse all theorems in the knowledge base
- **"associativity"** - Search for content mentioning associativity
- **"topology"** - Explore topological concepts

## Search Tips

1. **Use keywords**: Search for specific mathematical terms like "homomorphism", "compact", or "prime"
2. **Search by type**: Look for specific types of content (definitions, theorems, examples)
3. **Explore domains**: Search for areas like "algebra", "topology", or "analysis"
4. **Follow connections**: Use the "Show Related" button to discover dependencies and examples
